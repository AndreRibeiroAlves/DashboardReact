{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Leaflet","Icon","Default","imagePath","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","App","state","lat","lng","zoom","position","this","Map","center","style","top","bottom","left","right","TileLayer","attribution","url","Marker","Popup","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAKAA,IAAQC,KAAKC,QAAQC,UACrB,iCAEOH,IAAQC,KAAKC,QAAQE,UAAUC,YAEtCL,IAAQC,KAAKC,QAAQI,aAAa,CAC9BC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,M,IAmDRG,E,2MA7CfC,MAAQ,CACPC,KAAM,WACNC,KAAM,WACHC,KAAM,I,wEAKN,IAAMC,EAAW,CAACC,KAAKL,MAAMC,IAAKI,KAAKL,MAAME,KAC7C,OACA,kBAACI,EAAA,EAAD,CAAKC,OAAQH,EAAUD,KAAME,KAAKL,MAAMG,KAAMK,MAAO,CAACJ,SAAU,WAAYK,IAAK,EAAGC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,IAC3G,kBAACC,EAAA,EAAD,CACAC,YAAY,0EACZC,IAAI,uDAEJ,kBAACC,EAAA,EAAD,CAAQZ,SAAUA,GACvB,kBAACa,EAAA,EAAD,kBAIK,kBAACD,EAAA,EAAD,CAAQZ,SAAU,EAAE,YAAa,aACtC,kBAACa,EAAA,EAAD,kBAIK,kBAACD,EAAA,EAAD,CAAQZ,SAAU,EAAE,YAAa,aACtC,kBAACa,EAAA,EAAD,kBAIK,kBAACD,EAAA,EAAD,CAAQZ,SAAU,EAAE,YAAa,aACtC,kBAACa,EAAA,EAAD,kBAIK,kBAACD,EAAA,EAAD,CAAQZ,SAAU,EAAE,YAAa,aACtC,kBAACa,EAAA,EAAD,uB,GArCeC,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.464c86f6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Leaflet from 'leaflet';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nLeaflet.Icon.Default.imagePath =\r\n'../node_modules/leaflet'\r\n\r\ndelete Leaflet.Icon.Default.prototype._getIconUrl;\r\n\r\nLeaflet.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\n\r\n\r\nclass App extends Component {\r\nstate = {\r\n\tlat: -22.1225167,\r\n\tlng: -51.3882528,\r\n    zoom: 14,\r\n}\r\n\r\n\r\nrender() {\r\n    const position = [this.state.lat, this.state.lng]\r\n    return (\r\n    <Map center={position} zoom={this.state.zoom} style={{position: 'absolute', top: 0, bottom: 0, left: 0, right: 0}}>\r\n        <TileLayer\r\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker position={position}>\r\n\t\t\t<Popup>\r\n\t\t\t\tSensor 1\r\n\t\t\t</Popup>\r\n        </Marker>\r\n        <Marker position={[-22.1125167, -51.3982528]}>\r\n\t\t\t<Popup>\r\n\t\t\t\tSensor 2\r\n\t\t\t</Popup>\r\n        </Marker>\r\n        <Marker position={[-22.1325167, -51.3982528]}>\r\n\t\t\t<Popup>\r\n\t\t\t\tSensor 3\r\n\t\t\t</Popup>\r\n        </Marker>\r\n        <Marker position={[-22.1185167, -51.3982528]}>\r\n\t\t\t<Popup>\r\n\t\t\t\tSensor 4\r\n\t\t\t</Popup>\r\n        </Marker>\r\n        <Marker position={[-22.1325167, -51.3782528]}>\r\n\t\t\t<Popup>\r\n\t\t\t\tSensor 4\r\n\t\t\t</Popup>\r\n        </Marker>\r\n    </Map>\r\n    )\r\n}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}