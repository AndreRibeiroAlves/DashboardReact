{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Leaflet","Icon","Default","imagePath","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Map","props","handleChange","newValue","setState","ID","state","map","L","setView","tileLayer","maxZoom","attribution","addTo","sidebar","control","closeButton","position","addControl","on","hide","funcao","toggle","this","marker","id","style","height","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAoBAA,IAAQC,KAAKC,QAAQC,UACrB,iCAEOH,IAAQC,KAAKC,QAAQE,UAAUC,YAEtCL,IAAQC,KAAKC,QAAQI,aAAa,CAC9BC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,M,IAiERG,E,YA7Dd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KAINC,aAAe,SAACC,GACd,EAAKF,MAAMG,SAAS,CAAEC,GAAIF,KAJ5B,EAAKG,MAAM,CAACD,IAAI,GAFC,E,iFAWd,IAAIE,EAAMC,IAAED,IAAI,OACbA,EAAIE,QAAQ,EAAE,YAAa,YAAa,IAExCD,IAAEE,UAAU,oDAAqD,CAC7DC,QAAS,GACTC,YAAa,+CACdC,MAAMN,GAET,IAAIO,EAAUN,IAAEO,QAAQD,QAAQ,UAAW,CACvCE,aAAa,EACbC,SAAU,UAEdV,EAAIW,WAAWJ,GAEfP,EAAIY,GAAG,SAAS,WACZL,EAAQM,UAGlB,IACIC,EAAS,WACHP,EAAQQ,UAGlBC,KAAKnB,SAAS,CAACC,GALN,IAOHG,IAAEgB,OAAO,EAAE,YAAa,aAAaX,MAAMN,GAAKY,GAAG,QAASE,GAClEb,IAAEgB,OAAO,EAAE,YAAa,aAAaX,MAAMN,GAAKY,GAAG,QAASE,GAC5Db,IAAEgB,OAAO,EAAE,YAAa,aAAaX,MAAMN,GAAKY,GAAG,QAASE,GAC5Db,IAAEgB,OAAO,EAAE,YAAa,aAAaX,MAAMN,GAAKY,GAAG,QAASE,GAC5Db,IAAEgB,OAAO,EAAE,YAAa,aAAaX,MAAMN,GAAKY,GAAG,QAASE,K,+BAK1D,OAAQ,6BACR,yBAAKI,GAAG,WACP,uCAAaF,KAAKjB,MAAMD,IAExB,2CACA,2CACA,2CACA,2CACA,4CAGD,yBAAKoB,GAAG,MAAMC,MAAO,CAACC,OAAQ,Y,GAzDhBC,IAAMC,WCnBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f7bf6a0f.chunk.js","sourcesContent":["import React from 'react'\r\nimport Leaflet from 'leaflet';\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport Sidebar from 'leaflet-sidebar'\r\nimport L from 'leaflet';\r\n\r\nimport './leaflet/dist/leaflet.css';\r\nimport './leaflet-sidebar/L.Control.Sidebar.css';\r\n\r\n///https://dev.to/itsmestevieg/customising-leafletjs-f55\r\n///https://leafletjs.com/plugins.html\r\n///https://jsfiddle.net/wcLvsg37/1/\r\n///https://stackoverflow.com/questions/42282998/leaflet-sidebar-display-data-in-the-sidebar-when-a-marker-is-clicked\r\n///https://embed.plnkr.co/plunk/wH7u64\r\n///https://stackoverflow.com/questions/50437852/leaflet-sidebar-within-a-while-loop\r\n///https://stackoverflow.com/questions/36860914/toggle-leaflet-sidebar-v2?rq=1\r\n///https://www.npmjs.com/package/leaflet-sidebar\r\n///https://stackoverflow.com/questions/54047240/leaflet-js-with-tabletop-js-sidebar-menu-for-map\r\n///https://codepen.io/danhahn/pen/QKwEXN\r\n\r\nLeaflet.Icon.Default.imagePath =\r\n'../node_modules/leaflet'\r\n\r\ndelete Leaflet.Icon.Default.prototype._getIconUrl;\r\n\r\nLeaflet.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\nclass Map extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={ID:-1};\r\n\t}\r\n\t\r\n  handleChange = (newValue) => {\r\n    this.props.setState({ ID: newValue });\r\n  }\r\n  \r\n  componentDidMount() {\r\n\t  \r\n     var map = L.map('map');\r\n        map.setView([-22.1225167, -51.3862528], 16);\r\n\r\n        L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 18,\r\n            attribution: 'Map data &copy; OpenStreetMap contributors'\r\n        }).addTo(map);\r\n\r\n        var sidebar = L.control.sidebar('sidebar', {\r\n            closeButton: true,\r\n            position: 'right'\r\n        });\r\n        map.addControl(sidebar);\r\n\r\n        map.on('click', function () {\r\n            sidebar.hide();\r\n        })\r\n\t\t\r\n\t\tvar ID = 0;\r\n\t\tvar funcao = function () {\r\n            sidebar.toggle();\r\n\t\t\t/*this.setState({ID: 0});*/\r\n        }\r\n\t\tthis.setState({ID});\r\n\t\t\r\n        L.marker([-22.1225167, -51.3862528]).addTo(map).on('click', funcao);\r\n\t\tL.marker([-22.1226167, -51.3878528]).addTo(map).on('click', funcao);\r\n\t\tL.marker([-22.1215167, -51.3842528]).addTo(map).on('click', funcao);\r\n\t\tL.marker([-22.1236167, -51.3742528]).addTo(map).on('click', funcao);\r\n\t\tL.marker([-22.1285167, -51.3882528]).addTo(map).on('click', funcao);\r\n\t\t\r\n  }\r\n\r\n  render() {\r\n    return  <div>\r\n\t\t\t\t<div id=\"sidebar\">\r\n\t\t\t\t\t<h1>Sensor: {this.state.ID}</h1>\r\n\r\n\t\t\t\t\t<p>Gráfico 1</p>\r\n\t\t\t\t\t<p>Gráfico 2</p>\r\n\t\t\t\t\t<p>Gráfico 3</p>\r\n\t\t\t\t\t<p>Gráfico 4</p>\r\n\t\t\t\t\t<p>Gráfico 5</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id=\"map\" style={{height: 600}}></div>\r\n\t\t\t</div>\r\n  }\r\n}\r\n\r\nexport default Map;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}