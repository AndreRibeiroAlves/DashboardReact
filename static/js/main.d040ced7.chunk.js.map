{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Leaflet","Icon","Default","imagePath","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Mapa","props","state","collapsed","selected","sensor","center","sensores","this","setState","id","todo","lat","long","position","closeIcon","onOpen","bind","onClose","header","icon","anchor","Map","className","zoom","onClick","TileLayer","attribution","url","map","Marker","onClickMarker","Popup","onClickPinDashboardLink","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kXAmBAA,IAAQC,KAAKC,QAAQC,UACrB,iCAEOH,IAAQC,KAAKC,QAAQE,UAAUC,YAEtCL,IAAQC,KAAKC,QAAQI,aAAa,CAC9BC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,M,IAGFG,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,WAAW,EACXC,SAAU,cACVC,QAAS,EACTC,OAAQ,EAAE,YAAa,YACvBC,SAAUA,GARK,E,uEAajBC,KAAKC,SAAS,CAAEN,WAAW,M,6BAEtBO,GACLF,KAAKC,SAAS,CACZN,WAAW,EACXC,SAAUM,M,oCAIAC,GACZH,KAAKC,SAAS,CACZN,WAAW,EACXG,OAAQ,CAAEK,EAAKC,IAAKD,EAAKE,U,8CAILF,GACtBH,KAAKC,SAAS,CACZN,WAAYK,KAAKN,MAAMC,UACvBE,OAAQM,EAAKD,O,+BAIP,IAAD,OACP,OACE,oCACE,kBAAC,IAAD,CACEA,GAAG,UACHI,SAAS,QACTX,UAAWK,KAAKN,MAAMC,UACtBY,UAAW,kBAAC,IAAD,MACXX,SAAUI,KAAKN,MAAME,SACrBY,OAAQR,KAAKQ,OAAOC,KAAKT,MACzBU,QAASV,KAAKU,QAAQD,KAAKT,OAE3B,kBAAC,IAAD,CAAKE,GAAG,cAAcS,OAAO,oBAAcC,KAAM,kBAAC,IAAD,OAC/C,sCAAYZ,KAAKN,MAAMG,QACvB,iDAEF,kBAAC,IAAD,CAAKK,GAAG,WAAWS,OAAO,WAAWC,KAAM,kBAAC,IAAD,OACzC,2CAEF,kBAAC,IAAD,CAAKV,GAAG,QAAQS,OAAO,QAAQC,KAAM,kBAAC,IAAD,OACnC,qDAEF,kBAAC,IAAD,CACEV,GAAG,gBACHS,OAAO,sBACPE,OAAO,SACPD,KAAM,kBAAC,IAAD,OAEN,2DAIJ,kBAACE,EAAA,EAAD,CAAKC,UAAU,WACbC,KAAM,GACNlB,OAAQE,KAAKN,MAAMI,OACnBmB,QAAS,WAAQ,EAAKhB,SAAS,CAAEN,WAAW,MAE5C,kBAACuB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAK,uDAENpB,KAAKN,MAAMK,SAASsB,KAAI,SAAClB,EAAMD,GAAP,OACvB,kBAACoB,EAAA,EAAD,CAAQhB,SAAU,CAACH,EAAKC,IAAKD,EAAKE,MAAOY,QAAS,kBAAM,EAAKM,cAAcpB,KACzE,kBAACqB,EAAA,EAAD,KACI,uBAAGP,QAAS,kBAAM,EAAKQ,wBAAwBtB,KAA/C,4BAZV,U,GArE0BuB,aA4F5B3B,EAAW,CACf,CACEG,GAAI,EACJE,KAAM,WACNC,MAAO,YAET,CACEH,GAAI,EACJE,KAAM,WACNC,MAAO,YAET,CACEH,GAAI,EACJE,KAAM,WACNC,MAAO,YAET,CACEH,GAAI,EACJE,KAAM,WACNC,MAAO,YAET,CACEH,GAAI,EACJE,KAAM,WACNC,MAAO,aCtISsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d040ced7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Leaflet from 'leaflet';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport { Sidebar, Tab } from \"react-leaflet-sidetabs\";\r\nimport { FiHome, FiChevronRight, FiSearch, FiSettings, FiBarChart, FiInfo } from \"react-icons/fi\";\r\nimport \"./styles.css\";\r\nimport './leaflet/dist/leaflet.css';\r\n\r\n///https://dev.to/itsmestevieg/customising-leafletjs-f55\r\n///https://leafletjs.com/plugins.html\r\n///https://jsfiddle.net/wcLvsg37/1/\r\n///https://stackoverflow.com/questions/42282998/leaflet-sidebar-display-data-in-the-sidebar-when-a-marker-is-clicked\r\n///https://embed.plnkr.co/plunk/wH7u64\r\n///https://stackoverflow.com/questions/50437852/leaflet-sidebar-within-a-while-loop\r\n///https://stackoverflow.com/questions/36860914/toggle-leaflet-sidebar-v2?rq=1\r\n///https://www.npmjs.com/package/leaflet-sidebar\r\n///https://stackoverflow.com/questions/54047240/leaflet-js-with-tabletop-js-sidebar-menu-for-map\r\n///https://codepen.io/danhahn/pen/QKwEXN\r\n\r\nLeaflet.Icon.Default.imagePath =\r\n'../node_modules/leaflet'\r\n\r\ndelete Leaflet.Icon.Default.prototype._getIconUrl;\r\n\r\nLeaflet.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n});\r\n\r\nexport default class Mapa extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      collapsed: true,\r\n      selected: \"informacoes\",\r\n      sensor: -1,\r\n      center: [-22.1225167, -51.3862528],\r\n      sensores: sensores\r\n    };\r\n  }\r\n\r\n  onClose() {\r\n    this.setState({ collapsed: true });\r\n  }\r\n  onOpen(id) {\r\n    this.setState({\r\n      collapsed: false,\r\n      selected: id\r\n    });\r\n  }\r\n  \r\n  onClickMarker(todo) {\r\n    this.setState({\r\n      collapsed: true,\r\n      center: [ todo.lat, todo.long ]\r\n    });\r\n  }\r\n  \r\n  onClickPinDashboardLink(todo) {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n      sensor: todo.id \r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Sidebar\r\n          id=\"sidebar\"\r\n          position=\"right\"\r\n          collapsed={this.state.collapsed}\r\n          closeIcon={<FiChevronRight />}\r\n          selected={this.state.selected}\r\n          onOpen={this.onOpen.bind(this)}\r\n          onClose={this.onClose.bind(this)}\r\n        >\r\n          <Tab id=\"informacoes\" header=\"Informações\" icon={<FiInfo />}>\r\n            <h3>Sensor {this.state.sensor}</h3>\r\n            <p>Informações</p>\r\n          </Tab>\r\n          <Tab id=\"graficos\" header=\"Graficos\" icon={<FiBarChart />}>\r\n            <p>Gráficos</p>\r\n          </Tab>\r\n          <Tab id=\"busca\" header=\"Busca\" icon={<FiSearch />}>\r\n            <p>Sensores na região</p>\r\n          </Tab>\r\n          <Tab\r\n            id=\"configuracoes\"\r\n            header=\"configurações\"\r\n            anchor=\"bottom\"\r\n            icon={<FiSettings />}\r\n          >\r\n            <p>Configurações Gerais</p>\r\n          </Tab>\r\n        </Sidebar>\r\n\r\n        <Map className=\"mapStyle\"\r\n          zoom={15}\r\n          center={this.state.center}\r\n          onClick={() => { this.setState({ collapsed: true });}}\r\n        >\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n          />\r\n          {this.state.sensores.map((todo, id) => \r\n            <Marker position={[todo.lat, todo.long]} onClick={() => this.onClickMarker(todo)}> \r\n              <Popup>\r\n                  <a onClick={() => this.onClickPinDashboardLink(todo)}>\r\n                      Mostrar Gráficos\r\n                  </a>\r\n              </Popup>\r\n          </Marker>)};\r\n        </Map>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst sensores = [\r\n  {\r\n    id: 1,\r\n    lat: -22.1225167,\r\n    long: -51.3862528\r\n  },\r\n  {\r\n    id: 2,\r\n    lat: -22.1226167,\r\n    long: -51.3878528\r\n  },\r\n  {\r\n    id: 3,\r\n    lat: -22.1215167,\r\n    long: -51.3842528\r\n  },\r\n  {\r\n    id: 4,\r\n    lat: -22.1236167,\r\n    long: -51.3742528\r\n  },\r\n  {\r\n    id: 5,\r\n    lat: -22.1285167,\r\n    long: -51.3882528\r\n  },\r\n]","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}